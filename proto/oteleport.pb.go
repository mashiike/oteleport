// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: proto/oteleport.proto

package proto

import (
	v13 "go.opentelemetry.io/proto/otlp/common/v1"
	v12 "go.opentelemetry.io/proto/otlp/logs/v1"
	v11 "go.opentelemetry.io/proto/otlp/metrics/v1"
	v1 "go.opentelemetry.io/proto/otlp/trace/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TracesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceSpans []*v1.ResourceSpans `protobuf:"bytes,1,rep,name=resource_spans,json=resourceSpans,proto3" json:"resource_spans,omitempty"`
	SignalType    string              `protobuf:"bytes,2,opt,name=signal_type,json=signalType,proto3" json:"signal_type,omitempty"`
}

func (x *TracesData) Reset() {
	*x = TracesData{}
	mi := &file_proto_oteleport_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TracesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracesData) ProtoMessage() {}

func (x *TracesData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_oteleport_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracesData.ProtoReflect.Descriptor instead.
func (*TracesData) Descriptor() ([]byte, []int) {
	return file_proto_oteleport_proto_rawDescGZIP(), []int{0}
}

func (x *TracesData) GetResourceSpans() []*v1.ResourceSpans {
	if x != nil {
		return x.ResourceSpans
	}
	return nil
}

func (x *TracesData) GetSignalType() string {
	if x != nil {
		return x.SignalType
	}
	return ""
}

type MetricsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceMetrics []*v11.ResourceMetrics `protobuf:"bytes,1,rep,name=resource_metrics,json=resourceMetrics,proto3" json:"resource_metrics,omitempty"`
	SignalType      string                 `protobuf:"bytes,2,opt,name=signal_type,json=signalType,proto3" json:"signal_type,omitempty"`
}

func (x *MetricsData) Reset() {
	*x = MetricsData{}
	mi := &file_proto_oteleport_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsData) ProtoMessage() {}

func (x *MetricsData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_oteleport_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsData.ProtoReflect.Descriptor instead.
func (*MetricsData) Descriptor() ([]byte, []int) {
	return file_proto_oteleport_proto_rawDescGZIP(), []int{1}
}

func (x *MetricsData) GetResourceMetrics() []*v11.ResourceMetrics {
	if x != nil {
		return x.ResourceMetrics
	}
	return nil
}

func (x *MetricsData) GetSignalType() string {
	if x != nil {
		return x.SignalType
	}
	return ""
}

type LogsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceLogs []*v12.ResourceLogs `protobuf:"bytes,1,rep,name=resource_logs,json=resourceLogs,proto3" json:"resource_logs,omitempty"`
	SignalType   string              `protobuf:"bytes,2,opt,name=signal_type,json=signalType,proto3" json:"signal_type,omitempty"`
}

func (x *LogsData) Reset() {
	*x = LogsData{}
	mi := &file_proto_oteleport_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogsData) ProtoMessage() {}

func (x *LogsData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_oteleport_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogsData.ProtoReflect.Descriptor instead.
func (*LogsData) Descriptor() ([]byte, []int) {
	return file_proto_oteleport_proto_rawDescGZIP(), []int{2}
}

func (x *LogsData) GetResourceLogs() []*v12.ResourceLogs {
	if x != nil {
		return x.ResourceLogs
	}
	return nil
}

func (x *LogsData) GetSignalType() string {
	if x != nil {
		return x.SignalType
	}
	return ""
}

type FetchTracesDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimeUnixNano uint64 `protobuf:"fixed64,1,opt,name=start_time_unix_nano,json=startTimeUnixNano,proto3" json:"start_time_unix_nano,omitempty"`
	EndTimeUnixNano   uint64 `protobuf:"fixed64,2,opt,name=end_time_unix_nano,json=endTimeUnixNano,proto3" json:"end_time_unix_nano,omitempty"`
	Cursor            string `protobuf:"bytes,3,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Limit             int64  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *FetchTracesDataRequest) Reset() {
	*x = FetchTracesDataRequest{}
	mi := &file_proto_oteleport_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchTracesDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchTracesDataRequest) ProtoMessage() {}

func (x *FetchTracesDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_oteleport_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchTracesDataRequest.ProtoReflect.Descriptor instead.
func (*FetchTracesDataRequest) Descriptor() ([]byte, []int) {
	return file_proto_oteleport_proto_rawDescGZIP(), []int{3}
}

func (x *FetchTracesDataRequest) GetStartTimeUnixNano() uint64 {
	if x != nil {
		return x.StartTimeUnixNano
	}
	return 0
}

func (x *FetchTracesDataRequest) GetEndTimeUnixNano() uint64 {
	if x != nil {
		return x.EndTimeUnixNano
	}
	return 0
}

func (x *FetchTracesDataRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *FetchTracesDataRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type FetchTracesDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceSpans []*v1.ResourceSpans `protobuf:"bytes,1,rep,name=resource_spans,json=resourceSpans,proto3" json:"resource_spans,omitempty"`
	NextCursor    string              `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	HasMore       bool                `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
}

func (x *FetchTracesDataResponse) Reset() {
	*x = FetchTracesDataResponse{}
	mi := &file_proto_oteleport_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchTracesDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchTracesDataResponse) ProtoMessage() {}

func (x *FetchTracesDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_oteleport_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchTracesDataResponse.ProtoReflect.Descriptor instead.
func (*FetchTracesDataResponse) Descriptor() ([]byte, []int) {
	return file_proto_oteleport_proto_rawDescGZIP(), []int{4}
}

func (x *FetchTracesDataResponse) GetResourceSpans() []*v1.ResourceSpans {
	if x != nil {
		return x.ResourceSpans
	}
	return nil
}

func (x *FetchTracesDataResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *FetchTracesDataResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type FetchMetricsDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimeUnixNano uint64 `protobuf:"fixed64,1,opt,name=start_time_unix_nano,json=startTimeUnixNano,proto3" json:"start_time_unix_nano,omitempty"`
	EndTimeUnixNano   uint64 `protobuf:"fixed64,2,opt,name=end_time_unix_nano,json=endTimeUnixNano,proto3" json:"end_time_unix_nano,omitempty"`
	Cursor            string `protobuf:"bytes,3,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Limit             int64  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *FetchMetricsDataRequest) Reset() {
	*x = FetchMetricsDataRequest{}
	mi := &file_proto_oteleport_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchMetricsDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchMetricsDataRequest) ProtoMessage() {}

func (x *FetchMetricsDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_oteleport_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchMetricsDataRequest.ProtoReflect.Descriptor instead.
func (*FetchMetricsDataRequest) Descriptor() ([]byte, []int) {
	return file_proto_oteleport_proto_rawDescGZIP(), []int{5}
}

func (x *FetchMetricsDataRequest) GetStartTimeUnixNano() uint64 {
	if x != nil {
		return x.StartTimeUnixNano
	}
	return 0
}

func (x *FetchMetricsDataRequest) GetEndTimeUnixNano() uint64 {
	if x != nil {
		return x.EndTimeUnixNano
	}
	return 0
}

func (x *FetchMetricsDataRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *FetchMetricsDataRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type FetchMetricsDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceMetrics []*v11.ResourceMetrics `protobuf:"bytes,1,rep,name=resource_metrics,json=resourceMetrics,proto3" json:"resource_metrics,omitempty"`
	NextCursor      string                 `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	HasMore         bool                   `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
}

func (x *FetchMetricsDataResponse) Reset() {
	*x = FetchMetricsDataResponse{}
	mi := &file_proto_oteleport_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchMetricsDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchMetricsDataResponse) ProtoMessage() {}

func (x *FetchMetricsDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_oteleport_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchMetricsDataResponse.ProtoReflect.Descriptor instead.
func (*FetchMetricsDataResponse) Descriptor() ([]byte, []int) {
	return file_proto_oteleport_proto_rawDescGZIP(), []int{6}
}

func (x *FetchMetricsDataResponse) GetResourceMetrics() []*v11.ResourceMetrics {
	if x != nil {
		return x.ResourceMetrics
	}
	return nil
}

func (x *FetchMetricsDataResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *FetchMetricsDataResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type FetchLogsDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimeUnixNano uint64 `protobuf:"fixed64,1,opt,name=start_time_unix_nano,json=startTimeUnixNano,proto3" json:"start_time_unix_nano,omitempty"`
	EndTimeUnixNano   uint64 `protobuf:"fixed64,2,opt,name=end_time_unix_nano,json=endTimeUnixNano,proto3" json:"end_time_unix_nano,omitempty"`
	Cursor            string `protobuf:"bytes,3,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Limit             int64  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *FetchLogsDataRequest) Reset() {
	*x = FetchLogsDataRequest{}
	mi := &file_proto_oteleport_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchLogsDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchLogsDataRequest) ProtoMessage() {}

func (x *FetchLogsDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_oteleport_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchLogsDataRequest.ProtoReflect.Descriptor instead.
func (*FetchLogsDataRequest) Descriptor() ([]byte, []int) {
	return file_proto_oteleport_proto_rawDescGZIP(), []int{7}
}

func (x *FetchLogsDataRequest) GetStartTimeUnixNano() uint64 {
	if x != nil {
		return x.StartTimeUnixNano
	}
	return 0
}

func (x *FetchLogsDataRequest) GetEndTimeUnixNano() uint64 {
	if x != nil {
		return x.EndTimeUnixNano
	}
	return 0
}

func (x *FetchLogsDataRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *FetchLogsDataRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type FetchLogsDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceLogs []*v12.ResourceLogs `protobuf:"bytes,1,rep,name=resource_logs,json=resourceLogs,proto3" json:"resource_logs,omitempty"`
	NextCursor   string              `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	HasMore      bool                `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
}

func (x *FetchLogsDataResponse) Reset() {
	*x = FetchLogsDataResponse{}
	mi := &file_proto_oteleport_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchLogsDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchLogsDataResponse) ProtoMessage() {}

func (x *FetchLogsDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_oteleport_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchLogsDataResponse.ProtoReflect.Descriptor instead.
func (*FetchLogsDataResponse) Descriptor() ([]byte, []int) {
	return file_proto_oteleport_proto_rawDescGZIP(), []int{8}
}

func (x *FetchLogsDataResponse) GetResourceLogs() []*v12.ResourceLogs {
	if x != nil {
		return x.ResourceLogs
	}
	return nil
}

func (x *FetchLogsDataResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *FetchLogsDataResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type FlattenSpan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// related ResourceSpans
	ResourceAttributes             []*v13.KeyValue `protobuf:"bytes,1,rep,name=resource_attributes,json=resourceAttributes,proto3" json:"resource_attributes,omitempty"`
	DroppedResourceAttributesCount uint32          `protobuf:"varint,2,opt,name=dropped_resource_attributes_count,json=droppedResourceAttributesCount,proto3" json:"dropped_resource_attributes_count,omitempty"`
	ResourceSpanSchemaUrl          string          `protobuf:"bytes,3,opt,name=resource_span_schema_url,json=resourceSpanSchemaUrl,proto3" json:"resource_span_schema_url,omitempty"`
	// related ScopeSpans
	ScopeName                   string          `protobuf:"bytes,4,opt,name=scope_name,json=scopeName,proto3" json:"scope_name,omitempty"`
	ScopeVersion                string          `protobuf:"bytes,5,opt,name=scope_version,json=scopeVersion,proto3" json:"scope_version,omitempty"`
	ScopeAttributes             []*v13.KeyValue `protobuf:"bytes,6,rep,name=scope_attributes,json=scopeAttributes,proto3" json:"scope_attributes,omitempty"`
	DroppedScopeAttributesCount uint32          `protobuf:"varint,7,opt,name=dropped_scope_attributes_count,json=droppedScopeAttributesCount,proto3" json:"dropped_scope_attributes_count,omitempty"`
	ScopeSpanSchemaUrl          string          `protobuf:"bytes,8,opt,name=scope_span_schema_url,json=scopeSpanSchemaUrl,proto3" json:"scope_span_schema_url,omitempty"`
	// related Span
	TraceId                []byte           `protobuf:"bytes,9,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	SpanId                 []byte           `protobuf:"bytes,10,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	TraceState             string           `protobuf:"bytes,11,opt,name=trace_state,json=traceState,proto3" json:"trace_state,omitempty"`
	ParentSpanId           []byte           `protobuf:"bytes,12,opt,name=parent_span_id,json=parentSpanId,proto3" json:"parent_span_id,omitempty"`
	Name                   string           `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	Kind                   v1.Span_SpanKind `protobuf:"varint,14,opt,name=kind,proto3,enum=opentelemetry.proto.trace.v1.Span_SpanKind" json:"kind,omitempty"`
	StartTimeUnixNano      uint64           `protobuf:"fixed64,15,opt,name=start_time_unix_nano,json=startTimeUnixNano,proto3" json:"start_time_unix_nano,omitempty"`
	EndTimeUnixNano        uint64           `protobuf:"fixed64,16,opt,name=end_time_unix_nano,json=endTimeUnixNano,proto3" json:"end_time_unix_nano,omitempty"`
	Attributes             []*v13.KeyValue  `protobuf:"bytes,17,rep,name=attributes,proto3" json:"attributes,omitempty"`
	DroppedAttributesCount uint32           `protobuf:"varint,18,opt,name=dropped_attributes_count,json=droppedAttributesCount,proto3" json:"dropped_attributes_count,omitempty"`
	Events                 []*v1.Span_Event `protobuf:"bytes,19,rep,name=events,proto3" json:"events,omitempty"`
	DroppedEventsCount     uint32           `protobuf:"varint,20,opt,name=dropped_events_count,json=droppedEventsCount,proto3" json:"dropped_events_count,omitempty"`
	Links                  []*v1.Span_Link  `protobuf:"bytes,21,rep,name=links,proto3" json:"links,omitempty"`
	DroppedLinksCount      uint32           `protobuf:"varint,22,opt,name=dropped_links_count,json=droppedLinksCount,proto3" json:"dropped_links_count,omitempty"`
	Status                 *v1.Status       `protobuf:"bytes,23,opt,name=status,proto3" json:"status,omitempty"`
	Flags                  uint32           `protobuf:"fixed32,24,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *FlattenSpan) Reset() {
	*x = FlattenSpan{}
	mi := &file_proto_oteleport_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlattenSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlattenSpan) ProtoMessage() {}

func (x *FlattenSpan) ProtoReflect() protoreflect.Message {
	mi := &file_proto_oteleport_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlattenSpan.ProtoReflect.Descriptor instead.
func (*FlattenSpan) Descriptor() ([]byte, []int) {
	return file_proto_oteleport_proto_rawDescGZIP(), []int{9}
}

func (x *FlattenSpan) GetResourceAttributes() []*v13.KeyValue {
	if x != nil {
		return x.ResourceAttributes
	}
	return nil
}

func (x *FlattenSpan) GetDroppedResourceAttributesCount() uint32 {
	if x != nil {
		return x.DroppedResourceAttributesCount
	}
	return 0
}

func (x *FlattenSpan) GetResourceSpanSchemaUrl() string {
	if x != nil {
		return x.ResourceSpanSchemaUrl
	}
	return ""
}

func (x *FlattenSpan) GetScopeName() string {
	if x != nil {
		return x.ScopeName
	}
	return ""
}

func (x *FlattenSpan) GetScopeVersion() string {
	if x != nil {
		return x.ScopeVersion
	}
	return ""
}

func (x *FlattenSpan) GetScopeAttributes() []*v13.KeyValue {
	if x != nil {
		return x.ScopeAttributes
	}
	return nil
}

func (x *FlattenSpan) GetDroppedScopeAttributesCount() uint32 {
	if x != nil {
		return x.DroppedScopeAttributesCount
	}
	return 0
}

func (x *FlattenSpan) GetScopeSpanSchemaUrl() string {
	if x != nil {
		return x.ScopeSpanSchemaUrl
	}
	return ""
}

func (x *FlattenSpan) GetTraceId() []byte {
	if x != nil {
		return x.TraceId
	}
	return nil
}

func (x *FlattenSpan) GetSpanId() []byte {
	if x != nil {
		return x.SpanId
	}
	return nil
}

func (x *FlattenSpan) GetTraceState() string {
	if x != nil {
		return x.TraceState
	}
	return ""
}

func (x *FlattenSpan) GetParentSpanId() []byte {
	if x != nil {
		return x.ParentSpanId
	}
	return nil
}

func (x *FlattenSpan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FlattenSpan) GetKind() v1.Span_SpanKind {
	if x != nil {
		return x.Kind
	}
	return v1.Span_SpanKind(0)
}

func (x *FlattenSpan) GetStartTimeUnixNano() uint64 {
	if x != nil {
		return x.StartTimeUnixNano
	}
	return 0
}

func (x *FlattenSpan) GetEndTimeUnixNano() uint64 {
	if x != nil {
		return x.EndTimeUnixNano
	}
	return 0
}

func (x *FlattenSpan) GetAttributes() []*v13.KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *FlattenSpan) GetDroppedAttributesCount() uint32 {
	if x != nil {
		return x.DroppedAttributesCount
	}
	return 0
}

func (x *FlattenSpan) GetEvents() []*v1.Span_Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *FlattenSpan) GetDroppedEventsCount() uint32 {
	if x != nil {
		return x.DroppedEventsCount
	}
	return 0
}

func (x *FlattenSpan) GetLinks() []*v1.Span_Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *FlattenSpan) GetDroppedLinksCount() uint32 {
	if x != nil {
		return x.DroppedLinksCount
	}
	return 0
}

func (x *FlattenSpan) GetStatus() *v1.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FlattenSpan) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type FlattenDataPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// related ResourceMetrics
	ResourceAttributes             []*v13.KeyValue `protobuf:"bytes,1,rep,name=resource_attributes,json=resourceAttributes,proto3" json:"resource_attributes,omitempty"`
	DroppedResourceAttributesCount uint32          `protobuf:"varint,2,opt,name=dropped_resource_attributes_count,json=droppedResourceAttributesCount,proto3" json:"dropped_resource_attributes_count,omitempty"`
	ResourceMetricSchemaUrl        string          `protobuf:"bytes,3,opt,name=resource_metric_schema_url,json=resourceMetricSchemaUrl,proto3" json:"resource_metric_schema_url,omitempty"`
	// related ScopeMetric
	ScopeName                   string          `protobuf:"bytes,4,opt,name=scope_name,json=scopeName,proto3" json:"scope_name,omitempty"`
	ScopeVersion                string          `protobuf:"bytes,5,opt,name=scope_version,json=scopeVersion,proto3" json:"scope_version,omitempty"`
	ScopeAttributes             []*v13.KeyValue `protobuf:"bytes,6,rep,name=scope_attributes,json=scopeAttributes,proto3" json:"scope_attributes,omitempty"`
	DroppedScopeAttributesCount uint32          `protobuf:"varint,7,opt,name=dropped_scope_attributes_count,json=droppedScopeAttributesCount,proto3" json:"dropped_scope_attributes_count,omitempty"`
	ScopeMetricSchemaUrl        string          `protobuf:"bytes,8,opt,name=scope_metric_schema_url,json=scopeMetricSchemaUrl,proto3" json:"scope_metric_schema_url,omitempty"`
	// related Metric
	Name        string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	Unit        string `protobuf:"bytes,11,opt,name=unit,proto3" json:"unit,omitempty"`
	// Types that are assignable to Data:
	//
	//	*FlattenDataPoint_Gauge
	//	*FlattenDataPoint_Sum
	//	*FlattenDataPoint_Histogram
	//	*FlattenDataPoint_ExponentialHistogram
	//	*FlattenDataPoint_Summary
	Data              isFlattenDataPoint_Data `protobuf_oneof:"data"`
	Metadata          []*v13.KeyValue         `protobuf:"bytes,20,rep,name=metadata,proto3" json:"metadata,omitempty"`
	StartTimeUnixNano uint64                  `protobuf:"fixed64,21,opt,name=start_time_unix_nano,json=startTimeUnixNano,proto3" json:"start_time_unix_nano,omitempty"`
	TimeUnixNano      uint64                  `protobuf:"fixed64,22,opt,name=time_unix_nano,json=timeUnixNano,proto3" json:"time_unix_nano,omitempty"`
}

func (x *FlattenDataPoint) Reset() {
	*x = FlattenDataPoint{}
	mi := &file_proto_oteleport_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlattenDataPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlattenDataPoint) ProtoMessage() {}

func (x *FlattenDataPoint) ProtoReflect() protoreflect.Message {
	mi := &file_proto_oteleport_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlattenDataPoint.ProtoReflect.Descriptor instead.
func (*FlattenDataPoint) Descriptor() ([]byte, []int) {
	return file_proto_oteleport_proto_rawDescGZIP(), []int{10}
}

func (x *FlattenDataPoint) GetResourceAttributes() []*v13.KeyValue {
	if x != nil {
		return x.ResourceAttributes
	}
	return nil
}

func (x *FlattenDataPoint) GetDroppedResourceAttributesCount() uint32 {
	if x != nil {
		return x.DroppedResourceAttributesCount
	}
	return 0
}

func (x *FlattenDataPoint) GetResourceMetricSchemaUrl() string {
	if x != nil {
		return x.ResourceMetricSchemaUrl
	}
	return ""
}

func (x *FlattenDataPoint) GetScopeName() string {
	if x != nil {
		return x.ScopeName
	}
	return ""
}

func (x *FlattenDataPoint) GetScopeVersion() string {
	if x != nil {
		return x.ScopeVersion
	}
	return ""
}

func (x *FlattenDataPoint) GetScopeAttributes() []*v13.KeyValue {
	if x != nil {
		return x.ScopeAttributes
	}
	return nil
}

func (x *FlattenDataPoint) GetDroppedScopeAttributesCount() uint32 {
	if x != nil {
		return x.DroppedScopeAttributesCount
	}
	return 0
}

func (x *FlattenDataPoint) GetScopeMetricSchemaUrl() string {
	if x != nil {
		return x.ScopeMetricSchemaUrl
	}
	return ""
}

func (x *FlattenDataPoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FlattenDataPoint) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FlattenDataPoint) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (m *FlattenDataPoint) GetData() isFlattenDataPoint_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *FlattenDataPoint) GetGauge() *FlattenGuage {
	if x, ok := x.GetData().(*FlattenDataPoint_Gauge); ok {
		return x.Gauge
	}
	return nil
}

func (x *FlattenDataPoint) GetSum() *FlattenSum {
	if x, ok := x.GetData().(*FlattenDataPoint_Sum); ok {
		return x.Sum
	}
	return nil
}

func (x *FlattenDataPoint) GetHistogram() *FlattenHistogram {
	if x, ok := x.GetData().(*FlattenDataPoint_Histogram); ok {
		return x.Histogram
	}
	return nil
}

func (x *FlattenDataPoint) GetExponentialHistogram() *FlattenExponentialHistogram {
	if x, ok := x.GetData().(*FlattenDataPoint_ExponentialHistogram); ok {
		return x.ExponentialHistogram
	}
	return nil
}

func (x *FlattenDataPoint) GetSummary() *FlattenSummary {
	if x, ok := x.GetData().(*FlattenDataPoint_Summary); ok {
		return x.Summary
	}
	return nil
}

func (x *FlattenDataPoint) GetMetadata() []*v13.KeyValue {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FlattenDataPoint) GetStartTimeUnixNano() uint64 {
	if x != nil {
		return x.StartTimeUnixNano
	}
	return 0
}

func (x *FlattenDataPoint) GetTimeUnixNano() uint64 {
	if x != nil {
		return x.TimeUnixNano
	}
	return 0
}

type isFlattenDataPoint_Data interface {
	isFlattenDataPoint_Data()
}

type FlattenDataPoint_Gauge struct {
	Gauge *FlattenGuage `protobuf:"bytes,13,opt,name=gauge,proto3,oneof"`
}

type FlattenDataPoint_Sum struct {
	Sum *FlattenSum `protobuf:"bytes,15,opt,name=sum,proto3,oneof"`
}

type FlattenDataPoint_Histogram struct {
	Histogram *FlattenHistogram `protobuf:"bytes,17,opt,name=histogram,proto3,oneof"`
}

type FlattenDataPoint_ExponentialHistogram struct {
	ExponentialHistogram *FlattenExponentialHistogram `protobuf:"bytes,18,opt,name=exponential_histogram,json=exponentialHistogram,proto3,oneof"`
}

type FlattenDataPoint_Summary struct {
	Summary *FlattenSummary `protobuf:"bytes,19,opt,name=summary,proto3,oneof"`
}

func (*FlattenDataPoint_Gauge) isFlattenDataPoint_Data() {}

func (*FlattenDataPoint_Sum) isFlattenDataPoint_Data() {}

func (*FlattenDataPoint_Histogram) isFlattenDataPoint_Data() {}

func (*FlattenDataPoint_ExponentialHistogram) isFlattenDataPoint_Data() {}

func (*FlattenDataPoint_Summary) isFlattenDataPoint_Data() {}

type FlattenGuage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataPoint *v11.NumberDataPoint `protobuf:"bytes,1,opt,name=data_point,json=dataPoint,proto3" json:"data_point,omitempty"`
}

func (x *FlattenGuage) Reset() {
	*x = FlattenGuage{}
	mi := &file_proto_oteleport_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlattenGuage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlattenGuage) ProtoMessage() {}

func (x *FlattenGuage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_oteleport_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlattenGuage.ProtoReflect.Descriptor instead.
func (*FlattenGuage) Descriptor() ([]byte, []int) {
	return file_proto_oteleport_proto_rawDescGZIP(), []int{11}
}

func (x *FlattenGuage) GetDataPoint() *v11.NumberDataPoint {
	if x != nil {
		return x.DataPoint
	}
	return nil
}

type FlattenSum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataPoint              *v11.NumberDataPoint       `protobuf:"bytes,1,opt,name=data_point,json=dataPoint,proto3" json:"data_point,omitempty"`
	AggregationTemporality v11.AggregationTemporality `protobuf:"varint,2,opt,name=aggregation_temporality,json=aggregationTemporality,proto3,enum=opentelemetry.proto.metrics.v1.AggregationTemporality" json:"aggregation_temporality,omitempty"`
	IsMonotonic            bool                       `protobuf:"varint,3,opt,name=is_monotonic,json=isMonotonic,proto3" json:"is_monotonic,omitempty"`
}

func (x *FlattenSum) Reset() {
	*x = FlattenSum{}
	mi := &file_proto_oteleport_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlattenSum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlattenSum) ProtoMessage() {}

func (x *FlattenSum) ProtoReflect() protoreflect.Message {
	mi := &file_proto_oteleport_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlattenSum.ProtoReflect.Descriptor instead.
func (*FlattenSum) Descriptor() ([]byte, []int) {
	return file_proto_oteleport_proto_rawDescGZIP(), []int{12}
}

func (x *FlattenSum) GetDataPoint() *v11.NumberDataPoint {
	if x != nil {
		return x.DataPoint
	}
	return nil
}

func (x *FlattenSum) GetAggregationTemporality() v11.AggregationTemporality {
	if x != nil {
		return x.AggregationTemporality
	}
	return v11.AggregationTemporality(0)
}

func (x *FlattenSum) GetIsMonotonic() bool {
	if x != nil {
		return x.IsMonotonic
	}
	return false
}

type FlattenHistogram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataPoint              *v11.HistogramDataPoint    `protobuf:"bytes,1,opt,name=data_point,json=dataPoint,proto3" json:"data_point,omitempty"`
	AggregationTemporality v11.AggregationTemporality `protobuf:"varint,2,opt,name=aggregation_temporality,json=aggregationTemporality,proto3,enum=opentelemetry.proto.metrics.v1.AggregationTemporality" json:"aggregation_temporality,omitempty"`
}

func (x *FlattenHistogram) Reset() {
	*x = FlattenHistogram{}
	mi := &file_proto_oteleport_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlattenHistogram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlattenHistogram) ProtoMessage() {}

func (x *FlattenHistogram) ProtoReflect() protoreflect.Message {
	mi := &file_proto_oteleport_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlattenHistogram.ProtoReflect.Descriptor instead.
func (*FlattenHistogram) Descriptor() ([]byte, []int) {
	return file_proto_oteleport_proto_rawDescGZIP(), []int{13}
}

func (x *FlattenHistogram) GetDataPoint() *v11.HistogramDataPoint {
	if x != nil {
		return x.DataPoint
	}
	return nil
}

func (x *FlattenHistogram) GetAggregationTemporality() v11.AggregationTemporality {
	if x != nil {
		return x.AggregationTemporality
	}
	return v11.AggregationTemporality(0)
}

type FlattenExponentialHistogram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataPoint              *v11.ExponentialHistogramDataPoint `protobuf:"bytes,1,opt,name=data_point,json=dataPoint,proto3" json:"data_point,omitempty"`
	AggregationTemporality v11.AggregationTemporality         `protobuf:"varint,2,opt,name=aggregation_temporality,json=aggregationTemporality,proto3,enum=opentelemetry.proto.metrics.v1.AggregationTemporality" json:"aggregation_temporality,omitempty"`
}

func (x *FlattenExponentialHistogram) Reset() {
	*x = FlattenExponentialHistogram{}
	mi := &file_proto_oteleport_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlattenExponentialHistogram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlattenExponentialHistogram) ProtoMessage() {}

func (x *FlattenExponentialHistogram) ProtoReflect() protoreflect.Message {
	mi := &file_proto_oteleport_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlattenExponentialHistogram.ProtoReflect.Descriptor instead.
func (*FlattenExponentialHistogram) Descriptor() ([]byte, []int) {
	return file_proto_oteleport_proto_rawDescGZIP(), []int{14}
}

func (x *FlattenExponentialHistogram) GetDataPoint() *v11.ExponentialHistogramDataPoint {
	if x != nil {
		return x.DataPoint
	}
	return nil
}

func (x *FlattenExponentialHistogram) GetAggregationTemporality() v11.AggregationTemporality {
	if x != nil {
		return x.AggregationTemporality
	}
	return v11.AggregationTemporality(0)
}

type FlattenSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataPoint *v11.SummaryDataPoint `protobuf:"bytes,1,opt,name=data_point,json=dataPoint,proto3" json:"data_point,omitempty"`
}

func (x *FlattenSummary) Reset() {
	*x = FlattenSummary{}
	mi := &file_proto_oteleport_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlattenSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlattenSummary) ProtoMessage() {}

func (x *FlattenSummary) ProtoReflect() protoreflect.Message {
	mi := &file_proto_oteleport_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlattenSummary.ProtoReflect.Descriptor instead.
func (*FlattenSummary) Descriptor() ([]byte, []int) {
	return file_proto_oteleport_proto_rawDescGZIP(), []int{15}
}

func (x *FlattenSummary) GetDataPoint() *v11.SummaryDataPoint {
	if x != nil {
		return x.DataPoint
	}
	return nil
}

type FlattenLogRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// related ResourceLogs
	ResourceAttributes             []*v13.KeyValue `protobuf:"bytes,1,rep,name=resource_attributes,json=resourceAttributes,proto3" json:"resource_attributes,omitempty"`
	DroppedResourceAttributesCount uint32          `protobuf:"varint,2,opt,name=dropped_resource_attributes_count,json=droppedResourceAttributesCount,proto3" json:"dropped_resource_attributes_count,omitempty"`
	ResourceLogSchemaUrl           string          `protobuf:"bytes,3,opt,name=resource_log_schema_url,json=resourceLogSchemaUrl,proto3" json:"resource_log_schema_url,omitempty"`
	// related ScopeLogs
	ScopeName                   string          `protobuf:"bytes,4,opt,name=scope_name,json=scopeName,proto3" json:"scope_name,omitempty"`
	ScopeVersion                string          `protobuf:"bytes,5,opt,name=scope_version,json=scopeVersion,proto3" json:"scope_version,omitempty"`
	ScopeAttributes             []*v13.KeyValue `protobuf:"bytes,6,rep,name=scope_attributes,json=scopeAttributes,proto3" json:"scope_attributes,omitempty"`
	DroppedScopeAttributesCount uint32          `protobuf:"varint,7,opt,name=dropped_scope_attributes_count,json=droppedScopeAttributesCount,proto3" json:"dropped_scope_attributes_count,omitempty"`
	ScopeLogSchemaUrl           string          `protobuf:"bytes,8,opt,name=scope_log_schema_url,json=scopeLogSchemaUrl,proto3" json:"scope_log_schema_url,omitempty"`
	// related LogRecord
	TimeUnixNano           uint64             `protobuf:"fixed64,9,opt,name=time_unix_nano,json=timeUnixNano,proto3" json:"time_unix_nano,omitempty"`
	SeverityNumber         v12.SeverityNumber `protobuf:"varint,10,opt,name=severity_number,json=severityNumber,proto3,enum=opentelemetry.proto.logs.v1.SeverityNumber" json:"severity_number,omitempty"`
	SeverityText           string             `protobuf:"bytes,11,opt,name=severity_text,json=severityText,proto3" json:"severity_text,omitempty"`
	Body                   *v13.AnyValue      `protobuf:"bytes,12,opt,name=body,proto3" json:"body,omitempty"`
	Attributes             []*v13.KeyValue    `protobuf:"bytes,13,rep,name=attributes,proto3" json:"attributes,omitempty"`
	DroppedAttributesCount uint32             `protobuf:"varint,14,opt,name=dropped_attributes_count,json=droppedAttributesCount,proto3" json:"dropped_attributes_count,omitempty"`
	Flags                  uint32             `protobuf:"fixed32,15,opt,name=flags,proto3" json:"flags,omitempty"`
	TraceId                []byte             `protobuf:"bytes,16,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	SpanId                 []byte             `protobuf:"bytes,17,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	ObservedTimeUnixNano   uint64             `protobuf:"fixed64,18,opt,name=observed_time_unix_nano,json=observedTimeUnixNano,proto3" json:"observed_time_unix_nano,omitempty"`
}

func (x *FlattenLogRecord) Reset() {
	*x = FlattenLogRecord{}
	mi := &file_proto_oteleport_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlattenLogRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlattenLogRecord) ProtoMessage() {}

func (x *FlattenLogRecord) ProtoReflect() protoreflect.Message {
	mi := &file_proto_oteleport_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlattenLogRecord.ProtoReflect.Descriptor instead.
func (*FlattenLogRecord) Descriptor() ([]byte, []int) {
	return file_proto_oteleport_proto_rawDescGZIP(), []int{16}
}

func (x *FlattenLogRecord) GetResourceAttributes() []*v13.KeyValue {
	if x != nil {
		return x.ResourceAttributes
	}
	return nil
}

func (x *FlattenLogRecord) GetDroppedResourceAttributesCount() uint32 {
	if x != nil {
		return x.DroppedResourceAttributesCount
	}
	return 0
}

func (x *FlattenLogRecord) GetResourceLogSchemaUrl() string {
	if x != nil {
		return x.ResourceLogSchemaUrl
	}
	return ""
}

func (x *FlattenLogRecord) GetScopeName() string {
	if x != nil {
		return x.ScopeName
	}
	return ""
}

func (x *FlattenLogRecord) GetScopeVersion() string {
	if x != nil {
		return x.ScopeVersion
	}
	return ""
}

func (x *FlattenLogRecord) GetScopeAttributes() []*v13.KeyValue {
	if x != nil {
		return x.ScopeAttributes
	}
	return nil
}

func (x *FlattenLogRecord) GetDroppedScopeAttributesCount() uint32 {
	if x != nil {
		return x.DroppedScopeAttributesCount
	}
	return 0
}

func (x *FlattenLogRecord) GetScopeLogSchemaUrl() string {
	if x != nil {
		return x.ScopeLogSchemaUrl
	}
	return ""
}

func (x *FlattenLogRecord) GetTimeUnixNano() uint64 {
	if x != nil {
		return x.TimeUnixNano
	}
	return 0
}

func (x *FlattenLogRecord) GetSeverityNumber() v12.SeverityNumber {
	if x != nil {
		return x.SeverityNumber
	}
	return v12.SeverityNumber(0)
}

func (x *FlattenLogRecord) GetSeverityText() string {
	if x != nil {
		return x.SeverityText
	}
	return ""
}

func (x *FlattenLogRecord) GetBody() *v13.AnyValue {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *FlattenLogRecord) GetAttributes() []*v13.KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *FlattenLogRecord) GetDroppedAttributesCount() uint32 {
	if x != nil {
		return x.DroppedAttributesCount
	}
	return 0
}

func (x *FlattenLogRecord) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *FlattenLogRecord) GetTraceId() []byte {
	if x != nil {
		return x.TraceId
	}
	return nil
}

func (x *FlattenLogRecord) GetSpanId() []byte {
	if x != nil {
		return x.SpanId
	}
	return nil
}

func (x *FlattenLogRecord) GetObservedTimeUnixNano() uint64 {
	if x != nil {
		return x.ObservedTimeUnixNano
	}
	return 0
}

var File_proto_oteleport_proto protoreflect.FileDescriptor

var file_proto_oteleport_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x28, 0x6f, 0x70, 0x65,
	0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x6f, 0x70, 0x65,
	0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x01, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x0b,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x10, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7b, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x16, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2f, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e,
	0x6f, 0x12, 0x2b, 0x0a, 0x12, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xa9, 0x01, 0x0a,
	0x17, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x17, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69,
	0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x2b, 0x0a, 0x12, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61,
	0x6e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0xb2, 0x01, 0x0a, 0x18, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a,
	0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61,
	0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61,
	0x73, 0x4d, 0x6f, 0x72, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x14, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c,
	0x6f, 0x67, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x12,
	0x2b, 0x0a, 0x12, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78,
	0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x15, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65,
	0x22, 0xe3, 0x09, 0x0a, 0x0b, 0x46, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x53, 0x70, 0x61, 0x6e,
	0x12, 0x58, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x21, 0x64, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x70, 0x61, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x10, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b,
	0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x53, 0x70, 0x61, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x2e,
	0x53, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2f,
	0x0a, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x12,
	0x2b, 0x0a, 0x12, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78,
	0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x47, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x40, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x70, 0x61, 0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0xe4, 0x08, 0x0a, 0x10, 0x46, 0x6c, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x13, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x21, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1e, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x52, 0x0a, 0x10, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x64,
	0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x72,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x67,
	0x61, 0x75, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x47, 0x75, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05,
	0x67, 0x61, 0x75, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x53,
	0x75, 0x6d, 0x48, 0x00, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x12, 0x44, 0x0a, 0x09, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x48, 0x00, 0x52, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12,
	0x66, 0x0a, 0x15, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x6f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x48,
	0x00, 0x52, 0x14, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x14,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f,
	0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x24, 0x0a,
	0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e,
	0x61, 0x6e, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x4a, 0x04, 0x08, 0x0c, 0x10,
	0x0d, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x22, 0x5e, 0x0a,
	0x0c, 0x46, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x47, 0x75, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xf0, 0x01,
	0x0a, 0x0a, 0x46, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x53, 0x75, 0x6d, 0x12, 0x4e, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x6f, 0x0a, 0x17,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x16, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63,
	0x22, 0xd6, 0x01, 0x0a, 0x10, 0x46, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x51, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x6f, 0x0a, 0x17, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x16, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xec, 0x01, 0x0a, 0x1b, 0x46, 0x6c,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x5c, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x6f, 0x0a, 0x17, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x16, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x61, 0x0a, 0x0e, 0x46, 0x6c, 0x61, 0x74,
	0x74, 0x65, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x4f, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xde, 0x07, 0x0a, 0x10,
	0x46, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x58, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x21, 0x64, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4c, 0x6f, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x52, 0x0a, 0x10, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x64, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4c, 0x6f,
	0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f,
	0x12, 0x54, 0x0a, 0x0f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x47, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x16, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73,
	0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x32, 0xd9, 0x02, 0x0a,
	0x10, 0x4f, 0x74, 0x65, 0x72, 0x6c, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x6c, 0x0a, 0x0f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x2e, 0x6f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x6f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6f, 0x0a, 0x10, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2b, 0x2e, 0x6f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x6f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x66, 0x0a, 0x0d, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x28, 0x2e, 0x6f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x73, 0x68, 0x69, 0x69, 0x6b, 0x65, 0x2f,
	0x6f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_oteleport_proto_rawDescOnce sync.Once
	file_proto_oteleport_proto_rawDescData = file_proto_oteleport_proto_rawDesc
)

func file_proto_oteleport_proto_rawDescGZIP() []byte {
	file_proto_oteleport_proto_rawDescOnce.Do(func() {
		file_proto_oteleport_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_oteleport_proto_rawDescData)
	})
	return file_proto_oteleport_proto_rawDescData
}

var file_proto_oteleport_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_proto_oteleport_proto_goTypes = []any{
	(*TracesData)(nil),                        // 0: oteleport.proto.v1.TracesData
	(*MetricsData)(nil),                       // 1: oteleport.proto.v1.MetricsData
	(*LogsData)(nil),                          // 2: oteleport.proto.v1.LogsData
	(*FetchTracesDataRequest)(nil),            // 3: oteleport.proto.v1.FetchTracesDataRequest
	(*FetchTracesDataResponse)(nil),           // 4: oteleport.proto.v1.FetchTracesDataResponse
	(*FetchMetricsDataRequest)(nil),           // 5: oteleport.proto.v1.FetchMetricsDataRequest
	(*FetchMetricsDataResponse)(nil),          // 6: oteleport.proto.v1.FetchMetricsDataResponse
	(*FetchLogsDataRequest)(nil),              // 7: oteleport.proto.v1.FetchLogsDataRequest
	(*FetchLogsDataResponse)(nil),             // 8: oteleport.proto.v1.FetchLogsDataResponse
	(*FlattenSpan)(nil),                       // 9: oteleport.proto.v1.FlattenSpan
	(*FlattenDataPoint)(nil),                  // 10: oteleport.proto.v1.FlattenDataPoint
	(*FlattenGuage)(nil),                      // 11: oteleport.proto.v1.FlattenGuage
	(*FlattenSum)(nil),                        // 12: oteleport.proto.v1.FlattenSum
	(*FlattenHistogram)(nil),                  // 13: oteleport.proto.v1.FlattenHistogram
	(*FlattenExponentialHistogram)(nil),       // 14: oteleport.proto.v1.FlattenExponentialHistogram
	(*FlattenSummary)(nil),                    // 15: oteleport.proto.v1.FlattenSummary
	(*FlattenLogRecord)(nil),                  // 16: oteleport.proto.v1.FlattenLogRecord
	(*v1.ResourceSpans)(nil),                  // 17: opentelemetry.proto.trace.v1.ResourceSpans
	(*v11.ResourceMetrics)(nil),               // 18: opentelemetry.proto.metrics.v1.ResourceMetrics
	(*v12.ResourceLogs)(nil),                  // 19: opentelemetry.proto.logs.v1.ResourceLogs
	(*v13.KeyValue)(nil),                      // 20: opentelemetry.proto.common.v1.KeyValue
	(v1.Span_SpanKind)(0),                     // 21: opentelemetry.proto.trace.v1.Span.SpanKind
	(*v1.Span_Event)(nil),                     // 22: opentelemetry.proto.trace.v1.Span.Event
	(*v1.Span_Link)(nil),                      // 23: opentelemetry.proto.trace.v1.Span.Link
	(*v1.Status)(nil),                         // 24: opentelemetry.proto.trace.v1.Status
	(*v11.NumberDataPoint)(nil),               // 25: opentelemetry.proto.metrics.v1.NumberDataPoint
	(v11.AggregationTemporality)(0),           // 26: opentelemetry.proto.metrics.v1.AggregationTemporality
	(*v11.HistogramDataPoint)(nil),            // 27: opentelemetry.proto.metrics.v1.HistogramDataPoint
	(*v11.ExponentialHistogramDataPoint)(nil), // 28: opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint
	(*v11.SummaryDataPoint)(nil),              // 29: opentelemetry.proto.metrics.v1.SummaryDataPoint
	(v12.SeverityNumber)(0),                   // 30: opentelemetry.proto.logs.v1.SeverityNumber
	(*v13.AnyValue)(nil),                      // 31: opentelemetry.proto.common.v1.AnyValue
}
var file_proto_oteleport_proto_depIdxs = []int32{
	17, // 0: oteleport.proto.v1.TracesData.resource_spans:type_name -> opentelemetry.proto.trace.v1.ResourceSpans
	18, // 1: oteleport.proto.v1.MetricsData.resource_metrics:type_name -> opentelemetry.proto.metrics.v1.ResourceMetrics
	19, // 2: oteleport.proto.v1.LogsData.resource_logs:type_name -> opentelemetry.proto.logs.v1.ResourceLogs
	17, // 3: oteleport.proto.v1.FetchTracesDataResponse.resource_spans:type_name -> opentelemetry.proto.trace.v1.ResourceSpans
	18, // 4: oteleport.proto.v1.FetchMetricsDataResponse.resource_metrics:type_name -> opentelemetry.proto.metrics.v1.ResourceMetrics
	19, // 5: oteleport.proto.v1.FetchLogsDataResponse.resource_logs:type_name -> opentelemetry.proto.logs.v1.ResourceLogs
	20, // 6: oteleport.proto.v1.FlattenSpan.resource_attributes:type_name -> opentelemetry.proto.common.v1.KeyValue
	20, // 7: oteleport.proto.v1.FlattenSpan.scope_attributes:type_name -> opentelemetry.proto.common.v1.KeyValue
	21, // 8: oteleport.proto.v1.FlattenSpan.kind:type_name -> opentelemetry.proto.trace.v1.Span.SpanKind
	20, // 9: oteleport.proto.v1.FlattenSpan.attributes:type_name -> opentelemetry.proto.common.v1.KeyValue
	22, // 10: oteleport.proto.v1.FlattenSpan.events:type_name -> opentelemetry.proto.trace.v1.Span.Event
	23, // 11: oteleport.proto.v1.FlattenSpan.links:type_name -> opentelemetry.proto.trace.v1.Span.Link
	24, // 12: oteleport.proto.v1.FlattenSpan.status:type_name -> opentelemetry.proto.trace.v1.Status
	20, // 13: oteleport.proto.v1.FlattenDataPoint.resource_attributes:type_name -> opentelemetry.proto.common.v1.KeyValue
	20, // 14: oteleport.proto.v1.FlattenDataPoint.scope_attributes:type_name -> opentelemetry.proto.common.v1.KeyValue
	11, // 15: oteleport.proto.v1.FlattenDataPoint.gauge:type_name -> oteleport.proto.v1.FlattenGuage
	12, // 16: oteleport.proto.v1.FlattenDataPoint.sum:type_name -> oteleport.proto.v1.FlattenSum
	13, // 17: oteleport.proto.v1.FlattenDataPoint.histogram:type_name -> oteleport.proto.v1.FlattenHistogram
	14, // 18: oteleport.proto.v1.FlattenDataPoint.exponential_histogram:type_name -> oteleport.proto.v1.FlattenExponentialHistogram
	15, // 19: oteleport.proto.v1.FlattenDataPoint.summary:type_name -> oteleport.proto.v1.FlattenSummary
	20, // 20: oteleport.proto.v1.FlattenDataPoint.metadata:type_name -> opentelemetry.proto.common.v1.KeyValue
	25, // 21: oteleport.proto.v1.FlattenGuage.data_point:type_name -> opentelemetry.proto.metrics.v1.NumberDataPoint
	25, // 22: oteleport.proto.v1.FlattenSum.data_point:type_name -> opentelemetry.proto.metrics.v1.NumberDataPoint
	26, // 23: oteleport.proto.v1.FlattenSum.aggregation_temporality:type_name -> opentelemetry.proto.metrics.v1.AggregationTemporality
	27, // 24: oteleport.proto.v1.FlattenHistogram.data_point:type_name -> opentelemetry.proto.metrics.v1.HistogramDataPoint
	26, // 25: oteleport.proto.v1.FlattenHistogram.aggregation_temporality:type_name -> opentelemetry.proto.metrics.v1.AggregationTemporality
	28, // 26: oteleport.proto.v1.FlattenExponentialHistogram.data_point:type_name -> opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint
	26, // 27: oteleport.proto.v1.FlattenExponentialHistogram.aggregation_temporality:type_name -> opentelemetry.proto.metrics.v1.AggregationTemporality
	29, // 28: oteleport.proto.v1.FlattenSummary.data_point:type_name -> opentelemetry.proto.metrics.v1.SummaryDataPoint
	20, // 29: oteleport.proto.v1.FlattenLogRecord.resource_attributes:type_name -> opentelemetry.proto.common.v1.KeyValue
	20, // 30: oteleport.proto.v1.FlattenLogRecord.scope_attributes:type_name -> opentelemetry.proto.common.v1.KeyValue
	30, // 31: oteleport.proto.v1.FlattenLogRecord.severity_number:type_name -> opentelemetry.proto.logs.v1.SeverityNumber
	31, // 32: oteleport.proto.v1.FlattenLogRecord.body:type_name -> opentelemetry.proto.common.v1.AnyValue
	20, // 33: oteleport.proto.v1.FlattenLogRecord.attributes:type_name -> opentelemetry.proto.common.v1.KeyValue
	3,  // 34: oteleport.proto.v1.OterlportService.FetchTracesData:input_type -> oteleport.proto.v1.FetchTracesDataRequest
	5,  // 35: oteleport.proto.v1.OterlportService.FetchMetricsData:input_type -> oteleport.proto.v1.FetchMetricsDataRequest
	7,  // 36: oteleport.proto.v1.OterlportService.FetchLogsData:input_type -> oteleport.proto.v1.FetchLogsDataRequest
	4,  // 37: oteleport.proto.v1.OterlportService.FetchTracesData:output_type -> oteleport.proto.v1.FetchTracesDataResponse
	6,  // 38: oteleport.proto.v1.OterlportService.FetchMetricsData:output_type -> oteleport.proto.v1.FetchMetricsDataResponse
	8,  // 39: oteleport.proto.v1.OterlportService.FetchLogsData:output_type -> oteleport.proto.v1.FetchLogsDataResponse
	37, // [37:40] is the sub-list for method output_type
	34, // [34:37] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_proto_oteleport_proto_init() }
func file_proto_oteleport_proto_init() {
	if File_proto_oteleport_proto != nil {
		return
	}
	file_proto_oteleport_proto_msgTypes[10].OneofWrappers = []any{
		(*FlattenDataPoint_Gauge)(nil),
		(*FlattenDataPoint_Sum)(nil),
		(*FlattenDataPoint_Histogram)(nil),
		(*FlattenDataPoint_ExponentialHistogram)(nil),
		(*FlattenDataPoint_Summary)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_oteleport_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_oteleport_proto_goTypes,
		DependencyIndexes: file_proto_oteleport_proto_depIdxs,
		MessageInfos:      file_proto_oteleport_proto_msgTypes,
	}.Build()
	File_proto_oteleport_proto = out.File
	file_proto_oteleport_proto_rawDesc = nil
	file_proto_oteleport_proto_goTypes = nil
	file_proto_oteleport_proto_depIdxs = nil
}
