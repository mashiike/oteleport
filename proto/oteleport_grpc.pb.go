// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto/oteleport.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OterlportService_FetchTracesData_FullMethodName  = "/oteleport.proto.v1.OterlportService/FetchTracesData"
	OterlportService_FetchMetricsData_FullMethodName = "/oteleport.proto.v1.OterlportService/FetchMetricsData"
	OterlportService_FetchLogsData_FullMethodName    = "/oteleport.proto.v1.OterlportService/FetchLogsData"
)

// OterlportServiceClient is the client API for OterlportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OterlportServiceClient interface {
	FetchTracesData(ctx context.Context, in *FetchTracesDataRequest, opts ...grpc.CallOption) (*FetchTracesDataResponse, error)
	FetchMetricsData(ctx context.Context, in *FetchMetricsDataRequest, opts ...grpc.CallOption) (*FetchMetricsDataResponse, error)
	FetchLogsData(ctx context.Context, in *FetchLogsDataRequest, opts ...grpc.CallOption) (*FetchLogsDataResponse, error)
}

type oterlportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOterlportServiceClient(cc grpc.ClientConnInterface) OterlportServiceClient {
	return &oterlportServiceClient{cc}
}

func (c *oterlportServiceClient) FetchTracesData(ctx context.Context, in *FetchTracesDataRequest, opts ...grpc.CallOption) (*FetchTracesDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchTracesDataResponse)
	err := c.cc.Invoke(ctx, OterlportService_FetchTracesData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oterlportServiceClient) FetchMetricsData(ctx context.Context, in *FetchMetricsDataRequest, opts ...grpc.CallOption) (*FetchMetricsDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchMetricsDataResponse)
	err := c.cc.Invoke(ctx, OterlportService_FetchMetricsData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oterlportServiceClient) FetchLogsData(ctx context.Context, in *FetchLogsDataRequest, opts ...grpc.CallOption) (*FetchLogsDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchLogsDataResponse)
	err := c.cc.Invoke(ctx, OterlportService_FetchLogsData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OterlportServiceServer is the server API for OterlportService service.
// All implementations must embed UnimplementedOterlportServiceServer
// for forward compatibility.
type OterlportServiceServer interface {
	FetchTracesData(context.Context, *FetchTracesDataRequest) (*FetchTracesDataResponse, error)
	FetchMetricsData(context.Context, *FetchMetricsDataRequest) (*FetchMetricsDataResponse, error)
	FetchLogsData(context.Context, *FetchLogsDataRequest) (*FetchLogsDataResponse, error)
	mustEmbedUnimplementedOterlportServiceServer()
}

// UnimplementedOterlportServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOterlportServiceServer struct{}

func (UnimplementedOterlportServiceServer) FetchTracesData(context.Context, *FetchTracesDataRequest) (*FetchTracesDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchTracesData not implemented")
}
func (UnimplementedOterlportServiceServer) FetchMetricsData(context.Context, *FetchMetricsDataRequest) (*FetchMetricsDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMetricsData not implemented")
}
func (UnimplementedOterlportServiceServer) FetchLogsData(context.Context, *FetchLogsDataRequest) (*FetchLogsDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchLogsData not implemented")
}
func (UnimplementedOterlportServiceServer) mustEmbedUnimplementedOterlportServiceServer() {}
func (UnimplementedOterlportServiceServer) testEmbeddedByValue()                          {}

// UnsafeOterlportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OterlportServiceServer will
// result in compilation errors.
type UnsafeOterlportServiceServer interface {
	mustEmbedUnimplementedOterlportServiceServer()
}

func RegisterOterlportServiceServer(s grpc.ServiceRegistrar, srv OterlportServiceServer) {
	// If the following call pancis, it indicates UnimplementedOterlportServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OterlportService_ServiceDesc, srv)
}

func _OterlportService_FetchTracesData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTracesDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OterlportServiceServer).FetchTracesData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OterlportService_FetchTracesData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OterlportServiceServer).FetchTracesData(ctx, req.(*FetchTracesDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OterlportService_FetchMetricsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchMetricsDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OterlportServiceServer).FetchMetricsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OterlportService_FetchMetricsData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OterlportServiceServer).FetchMetricsData(ctx, req.(*FetchMetricsDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OterlportService_FetchLogsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchLogsDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OterlportServiceServer).FetchLogsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OterlportService_FetchLogsData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OterlportServiceServer).FetchLogsData(ctx, req.(*FetchLogsDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OterlportService_ServiceDesc is the grpc.ServiceDesc for OterlportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OterlportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oteleport.proto.v1.OterlportService",
	HandlerType: (*OterlportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchTracesData",
			Handler:    _OterlportService_FetchTracesData_Handler,
		},
		{
			MethodName: "FetchMetricsData",
			Handler:    _OterlportService_FetchMetricsData_Handler,
		},
		{
			MethodName: "FetchLogsData",
			Handler:    _OterlportService_FetchLogsData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/oteleport.proto",
}
