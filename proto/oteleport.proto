syntax = "proto3";

package oteleport.proto.v1;

import "opentelemetry/proto/trace/v1/trace.proto";
import "opentelemetry/proto/metrics/v1/metrics.proto";
import "opentelemetry/proto/logs/v1/logs.proto";

option go_package = "github.com/mashiike/oteleport/proto";


message TracesData {
    repeated opentelemetry.proto.trace.v1.ResourceSpans resource_spans = 1;
    string signal_type = 2;
};

message MetricsData {
    repeated opentelemetry.proto.metrics.v1.ResourceMetrics resource_metrics = 1;
    string signal_type = 2;
};

message LogsData {
    repeated opentelemetry.proto.logs.v1.ResourceLogs resource_logs = 1;
    string signal_type = 2;
};

service OterlportService {
    rpc FetchTracesData(FetchTracesDataRequest) returns (FetchTracesDataResponse) {}
    rpc FetchMetricsData(FetchMetricsDataRequest) returns (FetchMetricsDataResponse) {}
    rpc FetchLogsData(FetchLogsDataRequest) returns (FetchLogsDataResponse) {}
};

message FetchTracesDataRequest {
    fixed64 start_time_unix_nano = 1;
    fixed64 end_time_unix_nano = 2;
    string cursor = 3;
    int64 limit = 4;
};

message FetchTracesDataResponse {
  repeated opentelemetry.proto.trace.v1.ResourceSpans resource_spans = 1;
  string next_cursor = 2;
  bool has_more = 3;
};

message FetchMetricsDataRequest {
    fixed64 start_time_unix_nano = 1;
    fixed64 end_time_unix_nano = 2;
    string cursor = 3;
    int64 limit = 4;
};

message FetchMetricsDataResponse {
  repeated opentelemetry.proto.metrics.v1.ResourceMetrics resource_metrics = 1;
  string next_cursor = 2;
  bool has_more = 3;
};

message FetchLogsDataRequest {
    fixed64 start_time_unix_nano = 1;
    fixed64 end_time_unix_nano = 2;
    string cursor = 3;
    int64 limit = 4;
};

message FetchLogsDataResponse {
  repeated opentelemetry.proto.logs.v1.ResourceLogs resource_logs = 1;
  string next_cursor = 2;
  bool has_more = 3;
};
